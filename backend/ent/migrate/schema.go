// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// CarsColumns holds the columns for the "cars" table.
	CarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "car_no", Type: field.TypeString},
	}
	// CarsTable holds the schema information for the "cars" table.
	CarsTable = &schema.Table{
		Name:        "cars",
		Columns:     CarsColumns,
		PrimaryKey:  []*schema.Column{CarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PredicamentsColumns holds the columns for the "predicaments" table.
	PredicamentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "added_time", Type: field.TypeTime},
		{Name: "carid", Type: field.TypeInt, Nullable: true},
		{Name: "staffid", Type: field.TypeInt, Nullable: true},
		{Name: "status_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// PredicamentsTable holds the schema information for the "predicaments" table.
	PredicamentsTable = &schema.Table{
		Name:       "predicaments",
		Columns:    PredicamentsColumns,
		PrimaryKey: []*schema.Column{PredicamentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "predicaments_cars_car_predicament",
				Columns: []*schema.Column{PredicamentsColumns[2]},

				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "predicaments_staffs_staff_predicament",
				Columns: []*schema.Column{PredicamentsColumns[3]},

				RefColumns: []*schema.Column{StaffsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "predicaments_statuscars_statuscar_predicament",
				Columns: []*schema.Column{PredicamentsColumns[4]},

				RefColumns: []*schema.Column{StatuscarsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "predicaments_users_user_predicament",
				Columns: []*schema.Column{PredicamentsColumns[5]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StaffsColumns holds the columns for the "staffs" table.
	StaffsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "staff_email", Type: field.TypeString, Unique: true},
		{Name: "staff_name", Type: field.TypeString},
		{Name: "staff_password", Type: field.TypeString},
	}
	// StaffsTable holds the schema information for the "staffs" table.
	StaffsTable = &schema.Table{
		Name:        "staffs",
		Columns:     StaffsColumns,
		PrimaryKey:  []*schema.Column{StaffsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// StatuscarsColumns holds the columns for the "statuscars" table.
	StatuscarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status_detail", Type: field.TypeString},
	}
	// StatuscarsTable holds the schema information for the "statuscars" table.
	StatuscarsTable = &schema.Table{
		Name:        "statuscars",
		Columns:     StatuscarsColumns,
		PrimaryKey:  []*schema.Column{StatuscarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_email", Type: field.TypeString, Unique: true},
		{Name: "user_name", Type: field.TypeString},
		{Name: "user_password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CarsTable,
		PredicamentsTable,
		StaffsTable,
		StatuscarsTable,
		UsersTable,
	}
)

func init() {
	PredicamentsTable.ForeignKeys[0].RefTable = CarsTable
	PredicamentsTable.ForeignKeys[1].RefTable = StaffsTable
	PredicamentsTable.ForeignKeys[2].RefTable = StatuscarsTable
	PredicamentsTable.ForeignKeys[3].RefTable = UsersTable
}
