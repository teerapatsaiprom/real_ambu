// Code generated by entc, DO NOT EDIT.

package staff

import (
	"github.com/ambu/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StaffEmail applies equality check predicate on the "staff_email" field. It's identical to StaffEmailEQ.
func StaffEmail(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffEmail), v))
	})
}

// StaffName applies equality check predicate on the "staff_name" field. It's identical to StaffNameEQ.
func StaffName(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffName), v))
	})
}

// StaffPassword applies equality check predicate on the "staff_password" field. It's identical to StaffPasswordEQ.
func StaffPassword(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffPassword), v))
	})
}

// StaffEmailEQ applies the EQ predicate on the "staff_email" field.
func StaffEmailEQ(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailNEQ applies the NEQ predicate on the "staff_email" field.
func StaffEmailNEQ(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailIn applies the In predicate on the "staff_email" field.
func StaffEmailIn(vs ...string) predicate.Staff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStaffEmail), v...))
	})
}

// StaffEmailNotIn applies the NotIn predicate on the "staff_email" field.
func StaffEmailNotIn(vs ...string) predicate.Staff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStaffEmail), v...))
	})
}

// StaffEmailGT applies the GT predicate on the "staff_email" field.
func StaffEmailGT(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailGTE applies the GTE predicate on the "staff_email" field.
func StaffEmailGTE(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailLT applies the LT predicate on the "staff_email" field.
func StaffEmailLT(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailLTE applies the LTE predicate on the "staff_email" field.
func StaffEmailLTE(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailContains applies the Contains predicate on the "staff_email" field.
func StaffEmailContains(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailHasPrefix applies the HasPrefix predicate on the "staff_email" field.
func StaffEmailHasPrefix(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailHasSuffix applies the HasSuffix predicate on the "staff_email" field.
func StaffEmailHasSuffix(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailEqualFold applies the EqualFold predicate on the "staff_email" field.
func StaffEmailEqualFold(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStaffEmail), v))
	})
}

// StaffEmailContainsFold applies the ContainsFold predicate on the "staff_email" field.
func StaffEmailContainsFold(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStaffEmail), v))
	})
}

// StaffNameEQ applies the EQ predicate on the "staff_name" field.
func StaffNameEQ(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffName), v))
	})
}

// StaffNameNEQ applies the NEQ predicate on the "staff_name" field.
func StaffNameNEQ(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStaffName), v))
	})
}

// StaffNameIn applies the In predicate on the "staff_name" field.
func StaffNameIn(vs ...string) predicate.Staff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStaffName), v...))
	})
}

// StaffNameNotIn applies the NotIn predicate on the "staff_name" field.
func StaffNameNotIn(vs ...string) predicate.Staff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStaffName), v...))
	})
}

// StaffNameGT applies the GT predicate on the "staff_name" field.
func StaffNameGT(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStaffName), v))
	})
}

// StaffNameGTE applies the GTE predicate on the "staff_name" field.
func StaffNameGTE(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStaffName), v))
	})
}

// StaffNameLT applies the LT predicate on the "staff_name" field.
func StaffNameLT(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStaffName), v))
	})
}

// StaffNameLTE applies the LTE predicate on the "staff_name" field.
func StaffNameLTE(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStaffName), v))
	})
}

// StaffNameContains applies the Contains predicate on the "staff_name" field.
func StaffNameContains(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStaffName), v))
	})
}

// StaffNameHasPrefix applies the HasPrefix predicate on the "staff_name" field.
func StaffNameHasPrefix(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStaffName), v))
	})
}

// StaffNameHasSuffix applies the HasSuffix predicate on the "staff_name" field.
func StaffNameHasSuffix(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStaffName), v))
	})
}

// StaffNameEqualFold applies the EqualFold predicate on the "staff_name" field.
func StaffNameEqualFold(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStaffName), v))
	})
}

// StaffNameContainsFold applies the ContainsFold predicate on the "staff_name" field.
func StaffNameContainsFold(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStaffName), v))
	})
}

// StaffPasswordEQ applies the EQ predicate on the "staff_password" field.
func StaffPasswordEQ(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordNEQ applies the NEQ predicate on the "staff_password" field.
func StaffPasswordNEQ(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordIn applies the In predicate on the "staff_password" field.
func StaffPasswordIn(vs ...string) predicate.Staff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStaffPassword), v...))
	})
}

// StaffPasswordNotIn applies the NotIn predicate on the "staff_password" field.
func StaffPasswordNotIn(vs ...string) predicate.Staff {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Staff(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStaffPassword), v...))
	})
}

// StaffPasswordGT applies the GT predicate on the "staff_password" field.
func StaffPasswordGT(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordGTE applies the GTE predicate on the "staff_password" field.
func StaffPasswordGTE(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordLT applies the LT predicate on the "staff_password" field.
func StaffPasswordLT(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordLTE applies the LTE predicate on the "staff_password" field.
func StaffPasswordLTE(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordContains applies the Contains predicate on the "staff_password" field.
func StaffPasswordContains(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordHasPrefix applies the HasPrefix predicate on the "staff_password" field.
func StaffPasswordHasPrefix(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordHasSuffix applies the HasSuffix predicate on the "staff_password" field.
func StaffPasswordHasSuffix(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordEqualFold applies the EqualFold predicate on the "staff_password" field.
func StaffPasswordEqualFold(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStaffPassword), v))
	})
}

// StaffPasswordContainsFold applies the ContainsFold predicate on the "staff_password" field.
func StaffPasswordContainsFold(v string) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStaffPassword), v))
	})
}

// HasStaffPredicament applies the HasEdge predicate on the "staff_predicament" edge.
func HasStaffPredicament() predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StaffPredicamentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StaffPredicamentTable, StaffPredicamentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStaffPredicamentWith applies the HasEdge predicate on the "staff_predicament" edge with a given conditions (other predicates).
func HasStaffPredicamentWith(preds ...predicate.Predicament) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StaffPredicamentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StaffPredicamentTable, StaffPredicamentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Staff) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Staff) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Staff) predicate.Staff {
	return predicate.Staff(func(s *sql.Selector) {
		p(s.Not())
	})
}
