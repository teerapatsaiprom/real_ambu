// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/ambu/app/ent/car"
	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/staff"
	"github.com/ambu/app/ent/statuscar"
	"github.com/ambu/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PredicamentCreate is the builder for creating a Predicament entity.
type PredicamentCreate struct {
	config
	mutation *PredicamentMutation
	hooks    []Hook
}

// SetAddedTime sets the Added_Time field.
func (pc *PredicamentCreate) SetAddedTime(t time.Time) *PredicamentCreate {
	pc.mutation.SetAddedTime(t)
	return pc
}

// SetNillableAddedTime sets the Added_Time field if the given value is not nil.
func (pc *PredicamentCreate) SetNillableAddedTime(t *time.Time) *PredicamentCreate {
	if t != nil {
		pc.SetAddedTime(*t)
	}
	return pc
}

// SetCarID sets the Car edge to Car by id.
func (pc *PredicamentCreate) SetCarID(id int) *PredicamentCreate {
	pc.mutation.SetCarID(id)
	return pc
}

// SetNillableCarID sets the Car edge to Car by id if the given value is not nil.
func (pc *PredicamentCreate) SetNillableCarID(id *int) *PredicamentCreate {
	if id != nil {
		pc = pc.SetCarID(*id)
	}
	return pc
}

// SetCar sets the Car edge to Car.
func (pc *PredicamentCreate) SetCar(c *Car) *PredicamentCreate {
	return pc.SetCarID(c.ID)
}

// SetStatuscarID sets the Statuscar edge to Statuscar by id.
func (pc *PredicamentCreate) SetStatuscarID(id int) *PredicamentCreate {
	pc.mutation.SetStatuscarID(id)
	return pc
}

// SetNillableStatuscarID sets the Statuscar edge to Statuscar by id if the given value is not nil.
func (pc *PredicamentCreate) SetNillableStatuscarID(id *int) *PredicamentCreate {
	if id != nil {
		pc = pc.SetStatuscarID(*id)
	}
	return pc
}

// SetStatuscar sets the Statuscar edge to Statuscar.
func (pc *PredicamentCreate) SetStatuscar(s *Statuscar) *PredicamentCreate {
	return pc.SetStatuscarID(s.ID)
}

// SetStaffID sets the Staff edge to Staff by id.
func (pc *PredicamentCreate) SetStaffID(id int) *PredicamentCreate {
	pc.mutation.SetStaffID(id)
	return pc
}

// SetNillableStaffID sets the Staff edge to Staff by id if the given value is not nil.
func (pc *PredicamentCreate) SetNillableStaffID(id *int) *PredicamentCreate {
	if id != nil {
		pc = pc.SetStaffID(*id)
	}
	return pc
}

// SetStaff sets the Staff edge to Staff.
func (pc *PredicamentCreate) SetStaff(s *Staff) *PredicamentCreate {
	return pc.SetStaffID(s.ID)
}

// SetUserID sets the User edge to User by id.
func (pc *PredicamentCreate) SetUserID(id int) *PredicamentCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the User edge to User by id if the given value is not nil.
func (pc *PredicamentCreate) SetNillableUserID(id *int) *PredicamentCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the User edge to User.
func (pc *PredicamentCreate) SetUser(u *User) *PredicamentCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the PredicamentMutation object of the builder.
func (pc *PredicamentCreate) Mutation() *PredicamentMutation {
	return pc.mutation
}

// Save creates the Predicament in the database.
func (pc *PredicamentCreate) Save(ctx context.Context) (*Predicament, error) {
	if _, ok := pc.mutation.AddedTime(); !ok {
		v := predicament.DefaultAddedTime()
		pc.mutation.SetAddedTime(v)
	}
	var (
		err  error
		node *Predicament
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PredicamentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PredicamentCreate) SaveX(ctx context.Context) *Predicament {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PredicamentCreate) sqlSave(ctx context.Context) (*Predicament, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *PredicamentCreate) createSpec() (*Predicament, *sqlgraph.CreateSpec) {
	var (
		pr    = &Predicament{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: predicament.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: predicament.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: predicament.FieldAddedTime,
		})
		pr.AddedTime = value
	}
	if nodes := pc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.CarTable,
			Columns: []string{predicament.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.StatuscarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StatuscarTable,
			Columns: []string{predicament.StatuscarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StaffTable,
			Columns: []string{predicament.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.UserTable,
			Columns: []string{predicament.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
