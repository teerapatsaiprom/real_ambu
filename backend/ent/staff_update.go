// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/predicate"
	"github.com/ambu/app/ent/staff"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// StaffUpdate is the builder for updating Staff entities.
type StaffUpdate struct {
	config
	hooks      []Hook
	mutation   *StaffMutation
	predicates []predicate.Staff
}

// Where adds a new predicate for the builder.
func (su *StaffUpdate) Where(ps ...predicate.Staff) *StaffUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetStaffEmail sets the staff_email field.
func (su *StaffUpdate) SetStaffEmail(s string) *StaffUpdate {
	su.mutation.SetStaffEmail(s)
	return su
}

// SetStaffName sets the staff_name field.
func (su *StaffUpdate) SetStaffName(s string) *StaffUpdate {
	su.mutation.SetStaffName(s)
	return su
}

// SetStaffPassword sets the staff_password field.
func (su *StaffUpdate) SetStaffPassword(s string) *StaffUpdate {
	su.mutation.SetStaffPassword(s)
	return su
}

// AddStaffPredicamentIDs adds the staff_predicament edge to Predicament by ids.
func (su *StaffUpdate) AddStaffPredicamentIDs(ids ...int) *StaffUpdate {
	su.mutation.AddStaffPredicamentIDs(ids...)
	return su
}

// AddStaffPredicament adds the staff_predicament edges to Predicament.
func (su *StaffUpdate) AddStaffPredicament(p ...*Predicament) *StaffUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddStaffPredicamentIDs(ids...)
}

// Mutation returns the StaffMutation object of the builder.
func (su *StaffUpdate) Mutation() *StaffMutation {
	return su.mutation
}

// RemoveStaffPredicamentIDs removes the staff_predicament edge to Predicament by ids.
func (su *StaffUpdate) RemoveStaffPredicamentIDs(ids ...int) *StaffUpdate {
	su.mutation.RemoveStaffPredicamentIDs(ids...)
	return su
}

// RemoveStaffPredicament removes staff_predicament edges to Predicament.
func (su *StaffUpdate) RemoveStaffPredicament(p ...*Predicament) *StaffUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveStaffPredicamentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *StaffUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.StaffName(); ok {
		if err := staff.StaffNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "staff_name", err: fmt.Errorf("ent: validator failed for field \"staff_name\": %w", err)}
		}
	}
	if v, ok := su.mutation.StaffPassword(); ok {
		if err := staff.StaffPasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "staff_password", err: fmt.Errorf("ent: validator failed for field \"staff_password\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StaffUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StaffUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StaffUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staff.Table,
			Columns: staff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staff.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.StaffEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldStaffEmail,
		})
	}
	if value, ok := su.mutation.StaffName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldStaffName,
		})
	}
	if value, ok := su.mutation.StaffPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldStaffPassword,
		})
	}
	if nodes := su.mutation.RemovedStaffPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.StaffPredicamentTable,
			Columns: []string{staff.StaffPredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StaffPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.StaffPredicamentTable,
			Columns: []string{staff.StaffPredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StaffUpdateOne is the builder for updating a single Staff entity.
type StaffUpdateOne struct {
	config
	hooks    []Hook
	mutation *StaffMutation
}

// SetStaffEmail sets the staff_email field.
func (suo *StaffUpdateOne) SetStaffEmail(s string) *StaffUpdateOne {
	suo.mutation.SetStaffEmail(s)
	return suo
}

// SetStaffName sets the staff_name field.
func (suo *StaffUpdateOne) SetStaffName(s string) *StaffUpdateOne {
	suo.mutation.SetStaffName(s)
	return suo
}

// SetStaffPassword sets the staff_password field.
func (suo *StaffUpdateOne) SetStaffPassword(s string) *StaffUpdateOne {
	suo.mutation.SetStaffPassword(s)
	return suo
}

// AddStaffPredicamentIDs adds the staff_predicament edge to Predicament by ids.
func (suo *StaffUpdateOne) AddStaffPredicamentIDs(ids ...int) *StaffUpdateOne {
	suo.mutation.AddStaffPredicamentIDs(ids...)
	return suo
}

// AddStaffPredicament adds the staff_predicament edges to Predicament.
func (suo *StaffUpdateOne) AddStaffPredicament(p ...*Predicament) *StaffUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddStaffPredicamentIDs(ids...)
}

// Mutation returns the StaffMutation object of the builder.
func (suo *StaffUpdateOne) Mutation() *StaffMutation {
	return suo.mutation
}

// RemoveStaffPredicamentIDs removes the staff_predicament edge to Predicament by ids.
func (suo *StaffUpdateOne) RemoveStaffPredicamentIDs(ids ...int) *StaffUpdateOne {
	suo.mutation.RemoveStaffPredicamentIDs(ids...)
	return suo
}

// RemoveStaffPredicament removes staff_predicament edges to Predicament.
func (suo *StaffUpdateOne) RemoveStaffPredicament(p ...*Predicament) *StaffUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveStaffPredicamentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *StaffUpdateOne) Save(ctx context.Context) (*Staff, error) {
	if v, ok := suo.mutation.StaffName(); ok {
		if err := staff.StaffNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "staff_name", err: fmt.Errorf("ent: validator failed for field \"staff_name\": %w", err)}
		}
	}
	if v, ok := suo.mutation.StaffPassword(); ok {
		if err := staff.StaffPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "staff_password", err: fmt.Errorf("ent: validator failed for field \"staff_password\": %w", err)}
		}
	}

	var (
		err  error
		node *Staff
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StaffUpdateOne) SaveX(ctx context.Context) *Staff {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *StaffUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StaffUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StaffUpdateOne) sqlSave(ctx context.Context) (s *Staff, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staff.Table,
			Columns: staff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: staff.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Staff.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.StaffEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldStaffEmail,
		})
	}
	if value, ok := suo.mutation.StaffName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldStaffName,
		})
	}
	if value, ok := suo.mutation.StaffPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldStaffPassword,
		})
	}
	if nodes := suo.mutation.RemovedStaffPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.StaffPredicamentTable,
			Columns: []string{staff.StaffPredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StaffPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   staff.StaffPredicamentTable,
			Columns: []string{staff.StaffPredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Staff{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
