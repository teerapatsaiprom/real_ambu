// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/ambu/app/ent/migrate"

	"github.com/ambu/app/ent/car"
	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/staff"
	"github.com/ambu/app/ent/statuscar"
	"github.com/ambu/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Car is the client for interacting with the Car builders.
	Car *CarClient
	// Predicament is the client for interacting with the Predicament builders.
	Predicament *PredicamentClient
	// Staff is the client for interacting with the Staff builders.
	Staff *StaffClient
	// Statuscar is the client for interacting with the Statuscar builders.
	Statuscar *StatuscarClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Car = NewCarClient(c.config)
	c.Predicament = NewPredicamentClient(c.config)
	c.Staff = NewStaffClient(c.config)
	c.Statuscar = NewStatuscarClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Car:         NewCarClient(cfg),
		Predicament: NewPredicamentClient(cfg),
		Staff:       NewStaffClient(cfg),
		Statuscar:   NewStatuscarClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:      cfg,
		Car:         NewCarClient(cfg),
		Predicament: NewPredicamentClient(cfg),
		Staff:       NewStaffClient(cfg),
		Statuscar:   NewStatuscarClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Car.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Car.Use(hooks...)
	c.Predicament.Use(hooks...)
	c.Staff.Use(hooks...)
	c.Statuscar.Use(hooks...)
	c.User.Use(hooks...)
}

// CarClient is a client for the Car schema.
type CarClient struct {
	config
}

// NewCarClient returns a client for the Car from the given config.
func NewCarClient(c config) *CarClient {
	return &CarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `car.Hooks(f(g(h())))`.
func (c *CarClient) Use(hooks ...Hook) {
	c.hooks.Car = append(c.hooks.Car, hooks...)
}

// Create returns a create builder for Car.
func (c *CarClient) Create() *CarCreate {
	mutation := newCarMutation(c.config, OpCreate)
	return &CarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Car.
func (c *CarClient) Update() *CarUpdate {
	mutation := newCarMutation(c.config, OpUpdate)
	return &CarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarClient) UpdateOne(ca *Car) *CarUpdateOne {
	mutation := newCarMutation(c.config, OpUpdateOne, withCar(ca))
	return &CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarClient) UpdateOneID(id int) *CarUpdateOne {
	mutation := newCarMutation(c.config, OpUpdateOne, withCarID(id))
	return &CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Car.
func (c *CarClient) Delete() *CarDelete {
	mutation := newCarMutation(c.config, OpDelete)
	return &CarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarClient) DeleteOne(ca *Car) *CarDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarClient) DeleteOneID(id int) *CarDeleteOne {
	builder := c.Delete().Where(car.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarDeleteOne{builder}
}

// Create returns a query builder for Car.
func (c *CarClient) Query() *CarQuery {
	return &CarQuery{config: c.config}
}

// Get returns a Car entity by its id.
func (c *CarClient) Get(ctx context.Context, id int) (*Car, error) {
	return c.Query().Where(car.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarClient) GetX(ctx context.Context, id int) *Car {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// QueryCarPredicament queries the car_predicament edge of a Car.
func (c *CarClient) QueryCarPredicament(ca *Car) *PredicamentQuery {
	query := &PredicamentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, id),
			sqlgraph.To(predicament.Table, predicament.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.CarPredicamentTable, car.CarPredicamentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarClient) Hooks() []Hook {
	return c.hooks.Car
}

// PredicamentClient is a client for the Predicament schema.
type PredicamentClient struct {
	config
}

// NewPredicamentClient returns a client for the Predicament from the given config.
func NewPredicamentClient(c config) *PredicamentClient {
	return &PredicamentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `predicament.Hooks(f(g(h())))`.
func (c *PredicamentClient) Use(hooks ...Hook) {
	c.hooks.Predicament = append(c.hooks.Predicament, hooks...)
}

// Create returns a create builder for Predicament.
func (c *PredicamentClient) Create() *PredicamentCreate {
	mutation := newPredicamentMutation(c.config, OpCreate)
	return &PredicamentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Predicament.
func (c *PredicamentClient) Update() *PredicamentUpdate {
	mutation := newPredicamentMutation(c.config, OpUpdate)
	return &PredicamentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PredicamentClient) UpdateOne(pr *Predicament) *PredicamentUpdateOne {
	mutation := newPredicamentMutation(c.config, OpUpdateOne, withPredicament(pr))
	return &PredicamentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PredicamentClient) UpdateOneID(id int) *PredicamentUpdateOne {
	mutation := newPredicamentMutation(c.config, OpUpdateOne, withPredicamentID(id))
	return &PredicamentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Predicament.
func (c *PredicamentClient) Delete() *PredicamentDelete {
	mutation := newPredicamentMutation(c.config, OpDelete)
	return &PredicamentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PredicamentClient) DeleteOne(pr *Predicament) *PredicamentDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PredicamentClient) DeleteOneID(id int) *PredicamentDeleteOne {
	builder := c.Delete().Where(predicament.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PredicamentDeleteOne{builder}
}

// Create returns a query builder for Predicament.
func (c *PredicamentClient) Query() *PredicamentQuery {
	return &PredicamentQuery{config: c.config}
}

// Get returns a Predicament entity by its id.
func (c *PredicamentClient) Get(ctx context.Context, id int) (*Predicament, error) {
	return c.Query().Where(predicament.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PredicamentClient) GetX(ctx context.Context, id int) *Predicament {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryCar queries the Car edge of a Predicament.
func (c *PredicamentClient) QueryCar(pr *Predicament) *CarQuery {
	query := &CarQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(predicament.Table, predicament.FieldID, id),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, predicament.CarTable, predicament.CarColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatuscar queries the Statuscar edge of a Predicament.
func (c *PredicamentClient) QueryStatuscar(pr *Predicament) *StatuscarQuery {
	query := &StatuscarQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(predicament.Table, predicament.FieldID, id),
			sqlgraph.To(statuscar.Table, statuscar.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, predicament.StatuscarTable, predicament.StatuscarColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStaff queries the Staff edge of a Predicament.
func (c *PredicamentClient) QueryStaff(pr *Predicament) *StaffQuery {
	query := &StaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(predicament.Table, predicament.FieldID, id),
			sqlgraph.To(staff.Table, staff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, predicament.StaffTable, predicament.StaffColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the User edge of a Predicament.
func (c *PredicamentClient) QueryUser(pr *Predicament) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(predicament.Table, predicament.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, predicament.UserTable, predicament.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PredicamentClient) Hooks() []Hook {
	return c.hooks.Predicament
}

// StaffClient is a client for the Staff schema.
type StaffClient struct {
	config
}

// NewStaffClient returns a client for the Staff from the given config.
func NewStaffClient(c config) *StaffClient {
	return &StaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `staff.Hooks(f(g(h())))`.
func (c *StaffClient) Use(hooks ...Hook) {
	c.hooks.Staff = append(c.hooks.Staff, hooks...)
}

// Create returns a create builder for Staff.
func (c *StaffClient) Create() *StaffCreate {
	mutation := newStaffMutation(c.config, OpCreate)
	return &StaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Staff.
func (c *StaffClient) Update() *StaffUpdate {
	mutation := newStaffMutation(c.config, OpUpdate)
	return &StaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StaffClient) UpdateOne(s *Staff) *StaffUpdateOne {
	mutation := newStaffMutation(c.config, OpUpdateOne, withStaff(s))
	return &StaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StaffClient) UpdateOneID(id int) *StaffUpdateOne {
	mutation := newStaffMutation(c.config, OpUpdateOne, withStaffID(id))
	return &StaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Staff.
func (c *StaffClient) Delete() *StaffDelete {
	mutation := newStaffMutation(c.config, OpDelete)
	return &StaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StaffClient) DeleteOne(s *Staff) *StaffDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StaffClient) DeleteOneID(id int) *StaffDeleteOne {
	builder := c.Delete().Where(staff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StaffDeleteOne{builder}
}

// Create returns a query builder for Staff.
func (c *StaffClient) Query() *StaffQuery {
	return &StaffQuery{config: c.config}
}

// Get returns a Staff entity by its id.
func (c *StaffClient) Get(ctx context.Context, id int) (*Staff, error) {
	return c.Query().Where(staff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StaffClient) GetX(ctx context.Context, id int) *Staff {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStaffPredicament queries the staff_predicament edge of a Staff.
func (c *StaffClient) QueryStaffPredicament(s *Staff) *PredicamentQuery {
	query := &PredicamentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(staff.Table, staff.FieldID, id),
			sqlgraph.To(predicament.Table, predicament.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, staff.StaffPredicamentTable, staff.StaffPredicamentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StaffClient) Hooks() []Hook {
	return c.hooks.Staff
}

// StatuscarClient is a client for the Statuscar schema.
type StatuscarClient struct {
	config
}

// NewStatuscarClient returns a client for the Statuscar from the given config.
func NewStatuscarClient(c config) *StatuscarClient {
	return &StatuscarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statuscar.Hooks(f(g(h())))`.
func (c *StatuscarClient) Use(hooks ...Hook) {
	c.hooks.Statuscar = append(c.hooks.Statuscar, hooks...)
}

// Create returns a create builder for Statuscar.
func (c *StatuscarClient) Create() *StatuscarCreate {
	mutation := newStatuscarMutation(c.config, OpCreate)
	return &StatuscarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Statuscar.
func (c *StatuscarClient) Update() *StatuscarUpdate {
	mutation := newStatuscarMutation(c.config, OpUpdate)
	return &StatuscarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatuscarClient) UpdateOne(s *Statuscar) *StatuscarUpdateOne {
	mutation := newStatuscarMutation(c.config, OpUpdateOne, withStatuscar(s))
	return &StatuscarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatuscarClient) UpdateOneID(id int) *StatuscarUpdateOne {
	mutation := newStatuscarMutation(c.config, OpUpdateOne, withStatuscarID(id))
	return &StatuscarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statuscar.
func (c *StatuscarClient) Delete() *StatuscarDelete {
	mutation := newStatuscarMutation(c.config, OpDelete)
	return &StatuscarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatuscarClient) DeleteOne(s *Statuscar) *StatuscarDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatuscarClient) DeleteOneID(id int) *StatuscarDeleteOne {
	builder := c.Delete().Where(statuscar.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatuscarDeleteOne{builder}
}

// Create returns a query builder for Statuscar.
func (c *StatuscarClient) Query() *StatuscarQuery {
	return &StatuscarQuery{config: c.config}
}

// Get returns a Statuscar entity by its id.
func (c *StatuscarClient) Get(ctx context.Context, id int) (*Statuscar, error) {
	return c.Query().Where(statuscar.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatuscarClient) GetX(ctx context.Context, id int) *Statuscar {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStatuscarPredicament queries the statuscar_predicament edge of a Statuscar.
func (c *StatuscarClient) QueryStatuscarPredicament(s *Statuscar) *PredicamentQuery {
	query := &PredicamentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statuscar.Table, statuscar.FieldID, id),
			sqlgraph.To(predicament.Table, predicament.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statuscar.StatuscarPredicamentTable, statuscar.StatuscarPredicamentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatuscarClient) Hooks() []Hook {
	return c.hooks.Statuscar
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUserPredicament queries the user_predicament edge of a User.
func (c *UserClient) QueryUserPredicament(u *User) *PredicamentQuery {
	query := &PredicamentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(predicament.Table, predicament.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserPredicamentTable, user.UserPredicamentColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
