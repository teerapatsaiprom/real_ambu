// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/ambu/app/ent/car"
	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/predicate"
	"github.com/ambu/app/ent/staff"
	"github.com/ambu/app/ent/statuscar"
	"github.com/ambu/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// PredicamentUpdate is the builder for updating Predicament entities.
type PredicamentUpdate struct {
	config
	hooks      []Hook
	mutation   *PredicamentMutation
	predicates []predicate.Predicament
}

// Where adds a new predicate for the builder.
func (pu *PredicamentUpdate) Where(ps ...predicate.Predicament) *PredicamentUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetAddedTime sets the Added_Time field.
func (pu *PredicamentUpdate) SetAddedTime(t time.Time) *PredicamentUpdate {
	pu.mutation.SetAddedTime(t)
	return pu
}

// SetNillableAddedTime sets the Added_Time field if the given value is not nil.
func (pu *PredicamentUpdate) SetNillableAddedTime(t *time.Time) *PredicamentUpdate {
	if t != nil {
		pu.SetAddedTime(*t)
	}
	return pu
}

// SetCarID sets the Car edge to Car by id.
func (pu *PredicamentUpdate) SetCarID(id int) *PredicamentUpdate {
	pu.mutation.SetCarID(id)
	return pu
}

// SetNillableCarID sets the Car edge to Car by id if the given value is not nil.
func (pu *PredicamentUpdate) SetNillableCarID(id *int) *PredicamentUpdate {
	if id != nil {
		pu = pu.SetCarID(*id)
	}
	return pu
}

// SetCar sets the Car edge to Car.
func (pu *PredicamentUpdate) SetCar(c *Car) *PredicamentUpdate {
	return pu.SetCarID(c.ID)
}

// SetStatuscarID sets the Statuscar edge to Statuscar by id.
func (pu *PredicamentUpdate) SetStatuscarID(id int) *PredicamentUpdate {
	pu.mutation.SetStatuscarID(id)
	return pu
}

// SetNillableStatuscarID sets the Statuscar edge to Statuscar by id if the given value is not nil.
func (pu *PredicamentUpdate) SetNillableStatuscarID(id *int) *PredicamentUpdate {
	if id != nil {
		pu = pu.SetStatuscarID(*id)
	}
	return pu
}

// SetStatuscar sets the Statuscar edge to Statuscar.
func (pu *PredicamentUpdate) SetStatuscar(s *Statuscar) *PredicamentUpdate {
	return pu.SetStatuscarID(s.ID)
}

// SetStaffID sets the Staff edge to Staff by id.
func (pu *PredicamentUpdate) SetStaffID(id int) *PredicamentUpdate {
	pu.mutation.SetStaffID(id)
	return pu
}

// SetNillableStaffID sets the Staff edge to Staff by id if the given value is not nil.
func (pu *PredicamentUpdate) SetNillableStaffID(id *int) *PredicamentUpdate {
	if id != nil {
		pu = pu.SetStaffID(*id)
	}
	return pu
}

// SetStaff sets the Staff edge to Staff.
func (pu *PredicamentUpdate) SetStaff(s *Staff) *PredicamentUpdate {
	return pu.SetStaffID(s.ID)
}

// SetUserID sets the User edge to User by id.
func (pu *PredicamentUpdate) SetUserID(id int) *PredicamentUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the User edge to User by id if the given value is not nil.
func (pu *PredicamentUpdate) SetNillableUserID(id *int) *PredicamentUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the User edge to User.
func (pu *PredicamentUpdate) SetUser(u *User) *PredicamentUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PredicamentMutation object of the builder.
func (pu *PredicamentUpdate) Mutation() *PredicamentMutation {
	return pu.mutation
}

// ClearCar clears the Car edge to Car.
func (pu *PredicamentUpdate) ClearCar() *PredicamentUpdate {
	pu.mutation.ClearCar()
	return pu
}

// ClearStatuscar clears the Statuscar edge to Statuscar.
func (pu *PredicamentUpdate) ClearStatuscar() *PredicamentUpdate {
	pu.mutation.ClearStatuscar()
	return pu
}

// ClearStaff clears the Staff edge to Staff.
func (pu *PredicamentUpdate) ClearStaff() *PredicamentUpdate {
	pu.mutation.ClearStaff()
	return pu
}

// ClearUser clears the User edge to User.
func (pu *PredicamentUpdate) ClearUser() *PredicamentUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PredicamentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PredicamentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PredicamentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PredicamentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PredicamentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PredicamentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   predicament.Table,
			Columns: predicament.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: predicament.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: predicament.FieldAddedTime,
		})
	}
	if pu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.CarTable,
			Columns: []string{predicament.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.CarTable,
			Columns: []string{predicament.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StatuscarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StatuscarTable,
			Columns: []string{predicament.StatuscarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StatuscarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StatuscarTable,
			Columns: []string{predicament.StatuscarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StaffTable,
			Columns: []string{predicament.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StaffTable,
			Columns: []string{predicament.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.UserTable,
			Columns: []string{predicament.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.UserTable,
			Columns: []string{predicament.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{predicament.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PredicamentUpdateOne is the builder for updating a single Predicament entity.
type PredicamentUpdateOne struct {
	config
	hooks    []Hook
	mutation *PredicamentMutation
}

// SetAddedTime sets the Added_Time field.
func (puo *PredicamentUpdateOne) SetAddedTime(t time.Time) *PredicamentUpdateOne {
	puo.mutation.SetAddedTime(t)
	return puo
}

// SetNillableAddedTime sets the Added_Time field if the given value is not nil.
func (puo *PredicamentUpdateOne) SetNillableAddedTime(t *time.Time) *PredicamentUpdateOne {
	if t != nil {
		puo.SetAddedTime(*t)
	}
	return puo
}

// SetCarID sets the Car edge to Car by id.
func (puo *PredicamentUpdateOne) SetCarID(id int) *PredicamentUpdateOne {
	puo.mutation.SetCarID(id)
	return puo
}

// SetNillableCarID sets the Car edge to Car by id if the given value is not nil.
func (puo *PredicamentUpdateOne) SetNillableCarID(id *int) *PredicamentUpdateOne {
	if id != nil {
		puo = puo.SetCarID(*id)
	}
	return puo
}

// SetCar sets the Car edge to Car.
func (puo *PredicamentUpdateOne) SetCar(c *Car) *PredicamentUpdateOne {
	return puo.SetCarID(c.ID)
}

// SetStatuscarID sets the Statuscar edge to Statuscar by id.
func (puo *PredicamentUpdateOne) SetStatuscarID(id int) *PredicamentUpdateOne {
	puo.mutation.SetStatuscarID(id)
	return puo
}

// SetNillableStatuscarID sets the Statuscar edge to Statuscar by id if the given value is not nil.
func (puo *PredicamentUpdateOne) SetNillableStatuscarID(id *int) *PredicamentUpdateOne {
	if id != nil {
		puo = puo.SetStatuscarID(*id)
	}
	return puo
}

// SetStatuscar sets the Statuscar edge to Statuscar.
func (puo *PredicamentUpdateOne) SetStatuscar(s *Statuscar) *PredicamentUpdateOne {
	return puo.SetStatuscarID(s.ID)
}

// SetStaffID sets the Staff edge to Staff by id.
func (puo *PredicamentUpdateOne) SetStaffID(id int) *PredicamentUpdateOne {
	puo.mutation.SetStaffID(id)
	return puo
}

// SetNillableStaffID sets the Staff edge to Staff by id if the given value is not nil.
func (puo *PredicamentUpdateOne) SetNillableStaffID(id *int) *PredicamentUpdateOne {
	if id != nil {
		puo = puo.SetStaffID(*id)
	}
	return puo
}

// SetStaff sets the Staff edge to Staff.
func (puo *PredicamentUpdateOne) SetStaff(s *Staff) *PredicamentUpdateOne {
	return puo.SetStaffID(s.ID)
}

// SetUserID sets the User edge to User by id.
func (puo *PredicamentUpdateOne) SetUserID(id int) *PredicamentUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the User edge to User by id if the given value is not nil.
func (puo *PredicamentUpdateOne) SetNillableUserID(id *int) *PredicamentUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the User edge to User.
func (puo *PredicamentUpdateOne) SetUser(u *User) *PredicamentUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PredicamentMutation object of the builder.
func (puo *PredicamentUpdateOne) Mutation() *PredicamentMutation {
	return puo.mutation
}

// ClearCar clears the Car edge to Car.
func (puo *PredicamentUpdateOne) ClearCar() *PredicamentUpdateOne {
	puo.mutation.ClearCar()
	return puo
}

// ClearStatuscar clears the Statuscar edge to Statuscar.
func (puo *PredicamentUpdateOne) ClearStatuscar() *PredicamentUpdateOne {
	puo.mutation.ClearStatuscar()
	return puo
}

// ClearStaff clears the Staff edge to Staff.
func (puo *PredicamentUpdateOne) ClearStaff() *PredicamentUpdateOne {
	puo.mutation.ClearStaff()
	return puo
}

// ClearUser clears the User edge to User.
func (puo *PredicamentUpdateOne) ClearUser() *PredicamentUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PredicamentUpdateOne) Save(ctx context.Context) (*Predicament, error) {

	var (
		err  error
		node *Predicament
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PredicamentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PredicamentUpdateOne) SaveX(ctx context.Context) *Predicament {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *PredicamentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PredicamentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PredicamentUpdateOne) sqlSave(ctx context.Context) (pr *Predicament, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   predicament.Table,
			Columns: predicament.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: predicament.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Predicament.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: predicament.FieldAddedTime,
		})
	}
	if puo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.CarTable,
			Columns: []string{predicament.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.CarTable,
			Columns: []string{predicament.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StatuscarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StatuscarTable,
			Columns: []string{predicament.StatuscarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StatuscarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StatuscarTable,
			Columns: []string{predicament.StatuscarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuscar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StaffTable,
			Columns: []string{predicament.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.StaffTable,
			Columns: []string{predicament.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: staff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.UserTable,
			Columns: []string{predicament.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   predicament.UserTable,
			Columns: []string{predicament.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Predicament{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{predicament.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
