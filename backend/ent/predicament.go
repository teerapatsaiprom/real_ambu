// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/ambu/app/ent/car"
	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/staff"
	"github.com/ambu/app/ent/statuscar"
	"github.com/ambu/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Predicament is the model entity for the Predicament schema.
type Predicament struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "Added_Time" field.
	AddedTime time.Time `json:"Added_Time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PredicamentQuery when eager-loading is set.
	Edges     PredicamentEdges `json:"edges"`
	carid     *int
	staffid   *int
	status_id *int
	user_id   *int
}

// PredicamentEdges holds the relations/edges for other nodes in the graph.
type PredicamentEdges struct {
	// Car holds the value of the Car edge.
	Car *Car
	// Statuscar holds the value of the Statuscar edge.
	Statuscar *Statuscar
	// Staff holds the value of the Staff edge.
	Staff *Staff
	// User holds the value of the User edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PredicamentEdges) CarOrErr() (*Car, error) {
	if e.loadedTypes[0] {
		if e.Car == nil {
			// The edge Car was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: car.Label}
		}
		return e.Car, nil
	}
	return nil, &NotLoadedError{edge: "Car"}
}

// StatuscarOrErr returns the Statuscar value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PredicamentEdges) StatuscarOrErr() (*Statuscar, error) {
	if e.loadedTypes[1] {
		if e.Statuscar == nil {
			// The edge Statuscar was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statuscar.Label}
		}
		return e.Statuscar, nil
	}
	return nil, &NotLoadedError{edge: "Statuscar"}
}

// StaffOrErr returns the Staff value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PredicamentEdges) StaffOrErr() (*Staff, error) {
	if e.loadedTypes[2] {
		if e.Staff == nil {
			// The edge Staff was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: staff.Label}
		}
		return e.Staff, nil
	}
	return nil, &NotLoadedError{edge: "Staff"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PredicamentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.User == nil {
			// The edge User was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Predicament) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // Added_Time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Predicament) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // carid
		&sql.NullInt64{}, // staffid
		&sql.NullInt64{}, // status_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Predicament fields.
func (pr *Predicament) assignValues(values ...interface{}) error {
	if m, n := len(values), len(predicament.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Added_Time", values[0])
	} else if value.Valid {
		pr.AddedTime = value.Time
	}
	values = values[1:]
	if len(values) == len(predicament.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field carid", value)
		} else if value.Valid {
			pr.carid = new(int)
			*pr.carid = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field staffid", value)
		} else if value.Valid {
			pr.staffid = new(int)
			*pr.staffid = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field status_id", value)
		} else if value.Valid {
			pr.status_id = new(int)
			*pr.status_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			pr.user_id = new(int)
			*pr.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryCar queries the Car edge of the Predicament.
func (pr *Predicament) QueryCar() *CarQuery {
	return (&PredicamentClient{config: pr.config}).QueryCar(pr)
}

// QueryStatuscar queries the Statuscar edge of the Predicament.
func (pr *Predicament) QueryStatuscar() *StatuscarQuery {
	return (&PredicamentClient{config: pr.config}).QueryStatuscar(pr)
}

// QueryStaff queries the Staff edge of the Predicament.
func (pr *Predicament) QueryStaff() *StaffQuery {
	return (&PredicamentClient{config: pr.config}).QueryStaff(pr)
}

// QueryUser queries the User edge of the Predicament.
func (pr *Predicament) QueryUser() *UserQuery {
	return (&PredicamentClient{config: pr.config}).QueryUser(pr)
}

// Update returns a builder for updating this Predicament.
// Note that, you need to call Predicament.Unwrap() before calling this method, if this Predicament
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Predicament) Update() *PredicamentUpdateOne {
	return (&PredicamentClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Predicament) Unwrap() *Predicament {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Predicament is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Predicament) String() string {
	var builder strings.Builder
	builder.WriteString("Predicament(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Added_Time=")
	builder.WriteString(pr.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Predicaments is a parsable slice of Predicament.
type Predicaments []*Predicament

func (pr Predicaments) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
