// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/ambu/app/ent/statuscar"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Statuscar is the model entity for the Statuscar schema.
type Statuscar struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatusDetail holds the value of the "status_detail" field.
	StatusDetail string `json:"status_detail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatuscarQuery when eager-loading is set.
	Edges StatuscarEdges `json:"edges"`
}

// StatuscarEdges holds the relations/edges for other nodes in the graph.
type StatuscarEdges struct {
	// StatuscarPredicament holds the value of the statuscar_predicament edge.
	StatuscarPredicament []*Predicament
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatuscarPredicamentOrErr returns the StatuscarPredicament value or an error if the edge
// was not loaded in eager-loading.
func (e StatuscarEdges) StatuscarPredicamentOrErr() ([]*Predicament, error) {
	if e.loadedTypes[0] {
		return e.StatuscarPredicament, nil
	}
	return nil, &NotLoadedError{edge: "statuscar_predicament"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statuscar) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // status_detail
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statuscar fields.
func (s *Statuscar) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statuscar.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status_detail", values[0])
	} else if value.Valid {
		s.StatusDetail = value.String
	}
	return nil
}

// QueryStatuscarPredicament queries the statuscar_predicament edge of the Statuscar.
func (s *Statuscar) QueryStatuscarPredicament() *PredicamentQuery {
	return (&StatuscarClient{config: s.config}).QueryStatuscarPredicament(s)
}

// Update returns a builder for updating this Statuscar.
// Note that, you need to call Statuscar.Unwrap() before calling this method, if this Statuscar
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statuscar) Update() *StatuscarUpdateOne {
	return (&StatuscarClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Statuscar) Unwrap() *Statuscar {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statuscar is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statuscar) String() string {
	var builder strings.Builder
	builder.WriteString("Statuscar(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", status_detail=")
	builder.WriteString(s.StatusDetail)
	builder.WriteByte(')')
	return builder.String()
}

// Statuscars is a parsable slice of Statuscar.
type Statuscars []*Statuscar

func (s Statuscars) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
