// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/ambu/app/ent/predicament"
	"github.com/ambu/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUserEmail sets the user_email field.
func (uc *UserCreate) SetUserEmail(s string) *UserCreate {
	uc.mutation.SetUserEmail(s)
	return uc
}

// SetUserName sets the user_name field.
func (uc *UserCreate) SetUserName(s string) *UserCreate {
	uc.mutation.SetUserName(s)
	return uc
}

// SetUserPassword sets the user_password field.
func (uc *UserCreate) SetUserPassword(s string) *UserCreate {
	uc.mutation.SetUserPassword(s)
	return uc
}

// AddUserPredicamentIDs adds the user_predicament edge to Predicament by ids.
func (uc *UserCreate) AddUserPredicamentIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserPredicamentIDs(ids...)
	return uc
}

// AddUserPredicament adds the user_predicament edges to Predicament.
func (uc *UserCreate) AddUserPredicament(p ...*Predicament) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddUserPredicamentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.UserEmail(); !ok {
		return nil, &ValidationError{Name: "user_email", err: errors.New("ent: missing required field \"user_email\"")}
	}
	if _, ok := uc.mutation.UserName(); !ok {
		return nil, &ValidationError{Name: "user_name", err: errors.New("ent: missing required field \"user_name\"")}
	}
	if v, ok := uc.mutation.UserName(); ok {
		if err := user.UserNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "user_name", err: fmt.Errorf("ent: validator failed for field \"user_name\": %w", err)}
		}
	}
	if _, ok := uc.mutation.UserPassword(); !ok {
		return nil, &ValidationError{Name: "user_password", err: errors.New("ent: missing required field \"user_password\"")}
	}
	if v, ok := uc.mutation.UserPassword(); ok {
		if err := user.UserPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "user_password", err: fmt.Errorf("ent: validator failed for field \"user_password\": %w", err)}
		}
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.UserEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserEmail,
		})
		u.UserEmail = value
	}
	if value, ok := uc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserName,
		})
		u.UserName = value
	}
	if value, ok := uc.mutation.UserPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserPassword,
		})
		u.UserPassword = value
	}
	if nodes := uc.mutation.UserPredicamentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPredicamentTable,
			Columns: []string{user.UserPredicamentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: predicament.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
