/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPredicament,
    ControllersPredicamentFromJSON,
    ControllersPredicamentToJSON,
    EntCar,
    EntCarFromJSON,
    EntCarToJSON,
    EntPredicament,
    EntPredicamentFromJSON,
    EntPredicamentToJSON,
    EntStaff,
    EntStaffFromJSON,
    EntStaffToJSON,
    EntStatuscar,
    EntStatuscarFromJSON,
    EntStatuscarToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateCarRequest {
    car: EntCar;
}

export interface CreatePredicamentRequest {
    predicament: ControllersPredicament;
}

export interface CreateStaffRequest {
    staff: EntStaff;
}

export interface CreateStatuscarRequest {
    statuscar: EntStatuscar;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteCarRequest {
    id: number;
}

export interface DeletePredicamentRequest {
    id: number;
}

export interface DeleteStaffRequest {
    id: number;
}

export interface DeleteStatuscarRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetCarRequest {
    id: number;
}

export interface GetStaffRequest {
    id: number;
}

export interface GetStatuscarRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListCarRequest {
    limit?: number;
    offset?: number;
}

export interface ListPredicamentRequest {
    limit?: number;
    offset?: number;
}

export interface ListStaffRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatuscarRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateCarRequest {
    id: number;
    car: EntCar;
}

export interface UpdateStaffRequest {
    id: number;
    staff: EntStaff;
}

export interface UpdateStatuscarRequest {
    id: number;
    statuscar: EntStatuscar;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create car
     * Create car
     */
    async createCarRaw(requestParameters: CreateCarRequest): Promise<runtime.ApiResponse<EntCar>> {
        if (requestParameters.car === null || requestParameters.car === undefined) {
            throw new runtime.RequiredError('car','Required parameter requestParameters.car was null or undefined when calling createCar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCarToJSON(requestParameters.car),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarFromJSON(jsonValue));
    }

    /**
     * Create car
     * Create car
     */
    async createCar(requestParameters: CreateCarRequest): Promise<EntCar> {
        const response = await this.createCarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create predicament
     * Create predicament
     */
    async createPredicamentRaw(requestParameters: CreatePredicamentRequest): Promise<runtime.ApiResponse<EntPredicament>> {
        if (requestParameters.predicament === null || requestParameters.predicament === undefined) {
            throw new runtime.RequiredError('predicament','Required parameter requestParameters.predicament was null or undefined when calling createPredicament.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/predicaments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPredicamentToJSON(requestParameters.predicament),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPredicamentFromJSON(jsonValue));
    }

    /**
     * Create predicament
     * Create predicament
     */
    async createPredicament(requestParameters: CreatePredicamentRequest): Promise<EntPredicament> {
        const response = await this.createPredicamentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create staff
     * Create staff
     */
    async createStaffRaw(requestParameters: CreateStaffRequest): Promise<runtime.ApiResponse<EntStaff>> {
        if (requestParameters.staff === null || requestParameters.staff === undefined) {
            throw new runtime.RequiredError('staff','Required parameter requestParameters.staff was null or undefined when calling createStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/staffs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStaffToJSON(requestParameters.staff),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaffFromJSON(jsonValue));
    }

    /**
     * Create staff
     * Create staff
     */
    async createStaff(requestParameters: CreateStaffRequest): Promise<EntStaff> {
        const response = await this.createStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statuscar
     * Create statuscar
     */
    async createStatuscarRaw(requestParameters: CreateStatuscarRequest): Promise<runtime.ApiResponse<EntStatuscar>> {
        if (requestParameters.statuscar === null || requestParameters.statuscar === undefined) {
            throw new runtime.RequiredError('statuscar','Required parameter requestParameters.statuscar was null or undefined when calling createStatuscar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statuscars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatuscarToJSON(requestParameters.statuscar),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatuscarFromJSON(jsonValue));
    }

    /**
     * Create statuscar
     * Create statuscar
     */
    async createStatuscar(requestParameters: CreateStatuscarRequest): Promise<EntStatuscar> {
        const response = await this.createStatuscarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get car by ID
     * Delete a car entity by ID
     */
    async deleteCarRaw(requestParameters: DeleteCarRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get car by ID
     * Delete a car entity by ID
     */
    async deleteCar(requestParameters: DeleteCarRequest): Promise<object> {
        const response = await this.deleteCarRaw(requestParameters);
        return await response.value();
    }

    /**
     * get predicament by ID
     * Delete a predicament entity by ID
     */
    async deletePredicamentRaw(requestParameters: DeletePredicamentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePredicament.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/predicaments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get predicament by ID
     * Delete a predicament entity by ID
     */
    async deletePredicament(requestParameters: DeletePredicamentRequest): Promise<object> {
        const response = await this.deletePredicamentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staff by ID
     * Delete a staff entity by ID
     */
    async deleteStaffRaw(requestParameters: DeleteStaffRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Staffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get staff by ID
     * Delete a staff entity by ID
     */
    async deleteStaff(requestParameters: DeleteStaffRequest): Promise<object> {
        const response = await this.deleteStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statuscar by ID
     * Delete a statuscar entity by ID
     */
    async deleteStatuscarRaw(requestParameters: DeleteStatuscarRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatuscar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuscars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statuscar by ID
     * Delete a statuscar entity by ID
     */
    async deleteStatuscar(requestParameters: DeleteStatuscarRequest): Promise<object> {
        const response = await this.deleteStatuscarRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get car by ID
     * Get a car entity by ID
     */
    async getCarRaw(requestParameters: GetCarRequest): Promise<runtime.ApiResponse<EntCar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarFromJSON(jsonValue));
    }

    /**
     * get car by ID
     * Get a car entity by ID
     */
    async getCar(requestParameters: GetCarRequest): Promise<EntCar> {
        const response = await this.getCarRaw(requestParameters);
        return await response.value();
    }

    /**
     * get staff by ID
     * Get a staff entity by ID
     */
    async getStaffRaw(requestParameters: GetStaffRequest): Promise<runtime.ApiResponse<EntStaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaffFromJSON(jsonValue));
    }

    /**
     * get staff by ID
     * Get a staff entity by ID
     */
    async getStaff(requestParameters: GetStaffRequest): Promise<EntStaff> {
        const response = await this.getStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statuscar by ID
     * Get a statuscar entity by ID
     */
    async getStatuscarRaw(requestParameters: GetStatuscarRequest): Promise<runtime.ApiResponse<EntStatuscar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatuscar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuscars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatuscarFromJSON(jsonValue));
    }

    /**
     * get statuscar by ID
     * Get a statuscar entity by ID
     */
    async getStatuscar(requestParameters: GetStatuscarRequest): Promise<EntStatuscar> {
        const response = await this.getStatuscarRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list car entities
     * List car entities
     */
    async listCarRaw(requestParameters: ListCarRequest): Promise<runtime.ApiResponse<Array<EntCar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCarFromJSON));
    }

    /**
     * list car entities
     * List car entities
     */
    async listCar(requestParameters: ListCarRequest): Promise<Array<EntCar>> {
        const response = await this.listCarRaw(requestParameters);
        return await response.value();
    }

    /**
     * list predicament entities
     * List predicament entities
     */
    async listPredicamentRaw(requestParameters: ListPredicamentRequest): Promise<runtime.ApiResponse<Array<EntPredicament>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/predicaments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPredicamentFromJSON));
    }

    /**
     * list predicament entities
     * List predicament entities
     */
    async listPredicament(requestParameters: ListPredicamentRequest): Promise<Array<EntPredicament>> {
        const response = await this.listPredicamentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list staff entities
     * List staff entities
     */
    async listStaffRaw(requestParameters: ListStaffRequest): Promise<runtime.ApiResponse<Array<EntStaff>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/staffs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStaffFromJSON));
    }

    /**
     * list staff entities
     * List staff entities
     */
    async listStaff(requestParameters: ListStaffRequest): Promise<Array<EntStaff>> {
        const response = await this.listStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statuscar entities
     * List statuscar entities
     */
    async listStatuscarRaw(requestParameters: ListStatuscarRequest): Promise<runtime.ApiResponse<Array<EntStatuscar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuscars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatuscarFromJSON));
    }

    /**
     * list statuscar entities
     * List statuscar entities
     */
    async listStatuscar(requestParameters: ListStatuscarRequest): Promise<Array<EntStatuscar>> {
        const response = await this.listStatuscarRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update car by ID
     * Update a car entity by ID
     */
    async updateCarRaw(requestParameters: UpdateCarRequest): Promise<runtime.ApiResponse<EntCar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCar.');
        }

        if (requestParameters.car === null || requestParameters.car === undefined) {
            throw new runtime.RequiredError('car','Required parameter requestParameters.car was null or undefined when calling updateCar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCarToJSON(requestParameters.car),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarFromJSON(jsonValue));
    }

    /**
     * update car by ID
     * Update a car entity by ID
     */
    async updateCar(requestParameters: UpdateCarRequest): Promise<EntCar> {
        const response = await this.updateCarRaw(requestParameters);
        return await response.value();
    }

    /**
     * update staff by ID
     * Update a staff entity by ID
     */
    async updateStaffRaw(requestParameters: UpdateStaffRequest): Promise<runtime.ApiResponse<EntStaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStaff.');
        }

        if (requestParameters.staff === null || requestParameters.staff === undefined) {
            throw new runtime.RequiredError('staff','Required parameter requestParameters.staff was null or undefined when calling updateStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/staffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntStaffToJSON(requestParameters.staff),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStaffFromJSON(jsonValue));
    }

    /**
     * update staff by ID
     * Update a staff entity by ID
     */
    async updateStaff(requestParameters: UpdateStaffRequest): Promise<EntStaff> {
        const response = await this.updateStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * update statuscar by ID
     * Update a statuscar entity by ID
     */
    async updateStatuscarRaw(requestParameters: UpdateStatuscarRequest): Promise<runtime.ApiResponse<EntStatuscar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStatuscar.');
        }

        if (requestParameters.statuscar === null || requestParameters.statuscar === undefined) {
            throw new runtime.RequiredError('statuscar','Required parameter requestParameters.statuscar was null or undefined when calling updateStatuscar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statuscars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatuscarToJSON(requestParameters.statuscar),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatuscarFromJSON(jsonValue));
    }

    /**
     * update statuscar by ID
     * Update a statuscar entity by ID
     */
    async updateStatuscar(requestParameters: UpdateStatuscarRequest): Promise<EntStatuscar> {
        const response = await this.updateStatuscarRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
